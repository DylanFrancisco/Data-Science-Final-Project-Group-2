geom_point(data = hhadata2015.seperated, aes(x = as.numeric(Clinical_Severity_Level), y = residuals, color = "Clinical_Severity_Level")) +
scale_color_manual(name = "Severity Levels", values = c("Service_Severity_Level" = "blue", "Functional_Severity_Level" = "green", "Clinical_Severity_Level" = "orange"))
hhadata2015.seperated
set.seed(112)
rmse_values <- c()
for (i in 1:nrow(hhadata2015.seperated)) {
row_removed <- hhadata2015.seperated[-i, ]
lm_model <- lm(Average.HHA.Medicare.Payment.Amount ~ Service_Severity_Level + Functional_Severity_Level + Clinical_Severity_Level, data =    row_removed)
prediction <- predict(lm_model, newdata = hhadata2015.seperated[i, ])
rmse_i <- sqrt(mean((hhadata2015.seperated$Average.HHA.Medicare.Payment.Amount[i] - prediction)^2))
rmse_values <- c(rmse_values, rmse_i)
hhadata2015.seperated$RMSE[i] <- rmse_i
hhadata2015.seperated$Predictions[i] <- prediction
}
average_rmse <- mean(rmse_values)
print(paste("Average Root Mean Squared Error (RMSE) from Cross-Validation:", average_rmse))
BEST.func=function(data){
lowestMAE = data[which.min(data$MAE), 1:2]
as.numeric(lowestMAE)
}
BEST.CHOICE=BEST.func(data=OUT.MAE2) #Do Not Change
print(BEST.CHOICE) #Do Not Change
OUT.MAE2
OUT.MAE2 %>%
group_by(I) %>%
summarize(avgMAE=mean(MAE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=I,y=avgMAE))+
geom_line(aes(x=I,y=avgMAE,group=1)) +
theme_minimal()
OUT.MAE2 %>%
group_by(J) %>%
summarize(avgMAE=mean(MAE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=J,y=avgMAE))+
geom_line(aes(x=J,y=avgMAE,group=1)) +
theme_minimal()
data$I
BEST.func=function(data){
lowestMAE = data[which.min(data$MAE), 1:2]
best_i = data$I
}
BEST.CHOICE=BEST.func(data=OUT.MAE2) #Do Not Change
print(BEST.CHOICE) #Do Not Change
BEST.func=function(data){
lowestMAE = data[which.min(data$MAE), 1:2]
best_i = data$I[lowestMAE]
best_j = data$J[lowestMAE]
}
BEST.CHOICE=BEST.func(data=OUT.MAE2) #Do Not Change
BEST.func=function(data){
lowestMAE = data[which.min(data$MAE), 1:2]
best_i = data$I[lowestMAE]
best_j = data$J[lowestMAE]
return c(best_i, best_j)
BEST.func=function(data){
lowestMAE = data[which.min(data$MAE), 1:2]
best_i = data$I[lowestMAE]
best_j = data$J[lowestMAE]
c(best_i, best_j)
}
BEST.CHOICE=BEST.func(data=OUT.MAE2) #Do Not Change
BEST.func=function(data){
lowestMAE = which.min(data$MAE)
best_i = data$I[lowestMAE]
best_j = data$J[lowestMAE]
c(best_i, best_j)
}
BEST.CHOICE=BEST.func(data=OUT.MAE2) #Do Not Change
print(BEST.CHOICE) #Do Not Change
BEST.func=function(data){
lowestMAE = which.min(data$MAE)
best_i = data$I[lowestMAE]
best_j = data$J[lowestMAE]
return c(best_i, best_j)
BEST.func=function(data){
lowestMAE = which.min(data$MAE)
best_i = data$I[lowestMAE]
best_j = data$J[lowestMAE]
c(best_i, best_j)
}
BEST.CHOICE=BEST.func(data=OUT.MAE2) #Do Not Change
print(BEST.CHOICE) #Do Not Change
BEST.func=function(data){
min_index <- which.min(data)
# Convert the index to corresponding I and J values
best_I <- floor((min_index - 1) / nrow(data)) + 1
best_J <- (min_index - 1) %% nrow(data) + 1
# Return the vector of length 2 with the ideal I and J leading to the smallest MAE
c(best_I, best_J)
}
BEST.CHOICE=BEST.func(data=OUT.MAE2) #Do Not Change
BEST.func=function(data){
lowestMAE= data[which.min(data$MAE), 1:2]
as.numeric(lowestMAE)
}
BEST.CHOICE=BEST.func(data=OUT.MAE2) #Do Not Change
print(BEST.CHOICE) #Do Not Change
# Fit the best model to the entire DATA dataset
best_model <- train.model.func(data = DATA, I = BEST.CHOICE[1], J = BEST.CHOICE[2])
# Get the fitted values for location 920
location_920 <- filter(DATA, L == 920)
location_920_fitted <- augment(best_model, newdata = location_920)
# Create the scatter plot
ggplot(location_920_fitted, aes(x = W, y = .fitted)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(x = "Actual Max Water Temperature", y = "Fitted Max Water Temperature") +
ggtitle("Actual vs. Fitted Max Water Temperature for Location 920")
best_model <- train.model.func(data = DATA, I = BEST.CHOICE[1], J = BEST.CHOICE[2])
location_920 <- filter(DATA, L == 920)
location_920_fitted <- augment(best_model, newdata = location_920)
ggplot(location_920_fitted, aes(x = W, y = .fitted)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(x = "Actual Max Water Temperature", y = "Fitted Max Water Temperature") +
ggtitle("Actual vs. Fitted Max Water Temperature for Location 920")
location_328 <- filter(DATA, L == 328)
location_328_fitted <- augment(best_model, newdata = location_328)
location_328_residuals <- location_328_fitted$.resid
# Create the scatter plot
ggplot(location_328_fitted, aes(x = D, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, color = "red") +
labs(x = "Day", y = "Residual") +
ggtitle("Residuals over Day for Location 328")
location_328 <- filter(DATA, L == 328)
location_328_fitted <- augment(best_model, newdata = location_328)
location_328_residuals <- location_328_fitted$.resid
ggplot(location_328_fitted, aes(x = D, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, color = "red") +
labs(x = "Day", y = "Residual")
best_model <- train.model.func(data = DATA, I = BEST.CHOICE[1], J = BEST.CHOICE[2])
location_920 <- filter(DATA, L == 920)
location_920_fitted <- augment(best_model, newdata = location_920)
ggplot(location_920_fitted, aes(x = W, y = .fitted)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(x = "Actual Max Water Temperature", y = "Fitted Max Water Temperature")
top_5_models <- apply(OUT.MAE, 1, function(row) order(row, decreasing = FALSE)[1:5])
# Prepare a data frame to store the predictions
predictions_df <- data.frame()
# Loop through the top 5 models and get the predictions
for (i in 1:5) {
model_I <- top_5_models[i, 1]
model_J <- top_5_models[i, 2]
model <- train.model.func(data = DATA, I = model_I, J = model_J)
predictions <- augment(model, newdata = location_920_data)
predictions_df <- bind_rows(predictions_df, predictions)
}
top_5_models <- apply(OUT.MAE, 1, function(row) order(row, decreasing = FALSE)[1:5])
# Prepare a data frame to store the predictions
predictions_df <- data.frame()
# Loop through the top 5 models and get the predictions
for (i in 1:5) {
model_I <- top_5_models[i, 1]
model_J <- top_5_models[i, 2]
model <- train.model.func(data = DATA, I = model_I, J = model_J)
predictions <- augment(model, newdata = location_920_data)
predictions_df <- bind_rows(predictions_df, predictions)
}
location_920_data <- filter(DATA, L == 920)
top_5_models <- apply(OUT.MAE, 1, function(row) order(row, decreasing = FALSE)[1:5])
# Prepare a data frame to store the predictions
predictions_df <- data.frame()
# Loop through the top 5 models and get the predictions
for (i in 1:5) {
model_I <- top_5_models[i, 1]
model_J <- top_5_models[i, 2]
model <- train.model.func(data = DATA, I = model_I, J = model_J)
predictions <- augment(model, newdata = location_920_data)
predictions_df <- bind_rows(predictions_df, predictions)
}
# Create the plot
ggplot(location_920_data, aes(x = D, y = W)) +
geom_point(alpha = 0.05, stroke = 0) +
geom_line(data = predictions_df, aes(y = .fitted, color = as.factor(.index)), size = 1) +
labs(x = "Julian Day", y = "Max Water Temperature") +
scale_color_discrete(name = "Top 5 Models") +
ggtitle("Raw vs. Predicted Maximum Water Temperatures for Location 920")
location_920_data <- filter(DATA, L == 920)
# Get the top 5 models based on the lowest MAE
top_5_models <- apply(OUT.MAE, 1, function(row) order(row, decreasing = FALSE)[1:5])
# Prepare a data frame to store the predictions
predictions_df <- data.frame()
# Loop through the top 5 models and get the predictions
for (i in 1:5) {
model_I <- top_5_models[i, 1]
model_J <- top_5_models[i, 2]
model <- train.model.func(data = DATA, I = model_I, J = model_J)
predictions <- augment(model, newdata = location_920_data)
predictions$.index <- as.factor(i) # Add an index for each model to distinguish colors in the plot
predictions_df <- rbind(predictions_df, predictions)
}
# Create the plot
ggplot() +
geom_point(data = location_920_data, aes(x = D, y = W), alpha = 0.05, stroke = 0) +
geom_line(data = predictions_df, aes(x = D, y = .fitted, color = .index), size = 1) +
labs(x = "Julian Day", y = "Max Water Temperature") +
scale_color_discrete(name = "Top 5 Models") +
ggtitle("Raw vs. Predicted Maximum Water Temperatures for Location 920")
location_920_data <- filter(DATA, L == 920)
# Get the top 5 models based on the lowest MAE
top_5_models <- apply(OUT.MAE, 1, function(row) order(row, decreasing = FALSE)[1:5])
# Prepare a data frame to store the predictions
predictions_df <- data.frame()
# Loop through the top 5 models and get the predictions
for (i in 1:5) {
model_I <- top_5_models[i, 1]
model_J <- top_5_models[i, 2]
model <- train.model.func(data = DATA, I = model_I, J = model_J)
predictions <- augment(model, newdata = location_920_data)
predictions$.index <- as.factor(i) # Add an index for each model to distinguish colors in the plot
predictions_df <- rbind(predictions_df, predictions)
}
# Create the plot
ggplot() +
geom_point(data = location_920_data, aes(x = D, y = W), alpha = 0.05, stroke = 0) +
geom_line(data = predictions_df, aes(x = D, y = .fitted, color = .index), size = 1, alpha = 0.5) +
labs(x = "Julian Day", y = "Max Water Temperature") +
scale_color_discrete(name = "Top 5 Models") +
ggtitle("Raw vs. Predicted Maximum Water Temperatures for Location 920")
location_920_data <- filter(DATA, L == 920)
# Get the top 5 models based on the lowest MAE
top_5_models <- apply(OUT.MAE, 1, function(row) order(row, decreasing = FALSE)[1:5])
# Prepare a data frame to store the predictions
predictions_df <- data.frame()
# Loop through the top 5 models and get the predictions
for (i in 1:5) {
model_I <- top_5_models[i, 1]
model_J <- top_5_models[i, 2]
model <- train.model.func(data = DATA, I = model_I, J = model_J)
predictions <- augment(model, newdata = location_920_data)
predictions$.index <- as.factor(i) # Add an index for each model to distinguish colors in the plot
predictions_df <- rbind(predictions_df, predictions)
}
# Create the plot
ggplot() +
geom_point(data = location_920_data, aes(x = D, y = W), alpha = 0.05, stroke = 0) +
geom_line(data = predictions_df, aes(x = D, y = .fitted, color = .index), size = 1) +
labs(x = "Julian Day", y = "Max Water Temperature") +
scale_color_discrete(name = "Top 5 Models") +
ggtitle("Raw vs. Predicted Maximum Water Temperatures for Location 920")
location_920_data <- filter(DATA, L == 920)
top_5_models <- apply(OUT.MAE, 1, function(row) order(row, decreasing = FALSE)[1:5])
predictions_df <- data.frame()
for (i in 1:5) {
model_I <- top_5_models[i, 1]
model_J <- top_5_models[i, 2]
model <- train.model.func(data = DATA, I = model_I, J = model_J)
predictions <- augment(model, newdata = location_920_data)
predictions$.index <- as.factor(i)
predictions_df <- rbind(predictions_df, predictions)
}
ggplot() +
geom_point(data = location_920_data, aes(x = D, y = W), alpha = 0.05, stroke = 0) +
geom_line(data = predictions_df, aes(x = D, y = .fitted, color = .index), size = 1) +
labs(x = "Julian Day", y = "Max Water Temperature") +
scale_color_discrete(name = "Top 5 Models") +
location_920_data <- filter(DATA, L == 920)
top_5_models <- apply(OUT.MAE, 1, function(row) order(row, decreasing = FALSE)[1:5])
predictions_df <- data.frame()
for (i in 1:5) {
model_I <- top_5_models[i, 1]
model_J <- top_5_models[i, 2]
model <- train.model.func(data = DATA, I = model_I, J = model_J)
predictions <- augment(model, newdata = location_920_data)
predictions$.index <- as.factor(i)
predictions_df <- rbind(predictions_df, predictions)
}
ggplot() +
geom_point(data = location_920_data, aes(x = D, y = W), alpha = 0.05, stroke = 0) +
geom_line(data = predictions_df, aes(x = D, y = .fitted, color = .index), size = 1) +
labs(x = "Julian Day", y = "Max Water Temperature") +
scale_color_discrete(name = "Top 5 Models")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(caTools)
library(caret)
#setwd("C:/Users/dylan/Documents/GitHub/Data-Science-Final-Project-Group-2")
hhadata2015.untidy = read.csv("CSVs/medicare-home-health-agency-hha-hhrg-aggregate-report-cy-2015.csv")
hhadatastates2015.untidy = read.csv("CSVs/medicare-home-health-agency-hha-hhrg-by-state-aggregate-report-cy-2015.csv")
hhadatahhrg2015.untidy = read.csv("CSVs/medicare-home-health-agency-hha-provider-aggregate-report-cy-2015.csv")
hha_2015 <- read.csv("CSVs/medicare-home-health-agency-hha-provider-aggregate-report-cy-2015.csv")
hha_2014 <- read.csv("CSVs/medicare-home-health-agency-hha-provider-aggregate-report-cy-2014.csv")
hha_2013 <- read.csv("CSVs/medicare-home-health-provider-aggregate-table-cy-2013.csv")
hhadata2015 <- hhadata2015.untidy %>%
select("HHRG", "Total.Episodes", "Total.HHA.Medicare.Payment.Amount", "Average.HHA.Medicare.Payment.Amount")
ggplot(hhadata2015, aes(x = HHRG, y = Total.HHA.Medicare.Payment.Amount)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "Average Medicare Payment") +
scale_x_discrete(guide = guide_axis(n.dodge=15)) +
theme_minimal()
hhaStateData2015 <- hhadatastates2015.untidy %>%
select("State", "Average.HHA.Charge.Amount", "Total.Episodes" )
ggplot(hhaStateData2015, aes(x = State, y = Total.Episodes)) +
geom_point() +
labs(y = "Total Episodes per HHRG") +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
theme_minimal()
ggplot(hhaStateData2015, aes(x= State, y = Average.HHA.Charge.Amount)) +
geom_boxplot() +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
theme_minimal()
ggplot(hhadata2015, aes(x=HHRG, y = Average.HHA.Medicare.Payment.Amount)) +
geom_point() +
scale_x_discrete(guide = guide_axis(n.dodge=15))
hha_2015 %>% rename( "distinct"="Distinct.Beneficiaries..non.LUPA.") %>% mutate(actual_with_cancer =Percent.of.Beneficiaries.with.Cancer * .01 * distinct) %>%ggplot() + geom_point(aes(x = actual_with_cancer, y=Total.HHA.Charge.Amount..non.LUPA.)) +
labs(x = "Number People with Cancer", y = "Total HHA Charge Non-LUPA")
hha_2015 %>% rename( "distinct"="Distinct.Beneficiaries..non.LUPA.") %>% mutate(actual_with_Atrial.Fibrillation =Percent.of.Beneficiaries.with.Atrial.Fibrillation * .01 * distinct) %>%ggplot() + geom_point(aes(x = actual_with_Atrial.Fibrillation, y=Total.HHA.Charge.Amount..non.LUPA.))+
labs(x = "Number People with Atrial Fibrillation", y = "Total HHA Charge Non-LUPA")
hhaData2015Females <-  hhadatahhrg2015.untidy %>%
select("Provider.ID", "Male.Beneficiaries", "Female.Beneficiaries", "Total.HHA.Medicare.Payment.Amount..non.LUPA." ) %>%
filter(!Male.Beneficiaries>Female.Beneficiaries) %>%
filter(!Female.Beneficiaries - Male.Beneficiaries < 10) %>%
transmute(Females = "Females", Average = mean(Total.HHA.Medicare.Payment.Amount..non.LUPA.))
hhaData2015Males <-  hhadatahhrg2015.untidy %>%
select("Provider.ID", "Male.Beneficiaries", "Female.Beneficiaries", "Total.HHA.Medicare.Payment.Amount..non.LUPA." ) %>%
filter(Male.Beneficiaries>Female.Beneficiaries) %>%
filter(!Male.Beneficiaries - Female.Beneficiaries < 10) %>%
transmute(Males = "Males", Average = mean(Total.HHA.Medicare.Payment.Amount..non.LUPA.))
MalesVFemales <- tibble(
Sex = c("More Males", "More Females"),
Average_Paid_By_Medicare = c("$918,996.2", "$2,191,278")
)
MalesVFemaleshtml <- kable(MalesVFemales, format = "html", caption = "Average paid by Medicare for Home Health Agencies based on if more Males or Female Beneficiaries are Present by 10")
MalesVFemaleshtml
hha_2015_q2 <- hha_2015 %>% select( (1:5), (16:19), 37)
hha_2014_q2 <- hha_2014%>% select( (1:5), (16:19), 37) %>% rename("Total.HHA.Charge.Amount..non.LUPA_2014" = "Total.HHA.Charge.Amount..non.LUPA.") %>% select(Provider.ID, Total.HHA.Charge.Amount..non.LUPA_2014)
hha_2013_q2 <- hha_2013%>% select( (1:5), (16:19), 37) %>% rename("Total.HHA.Charge.Amount..non.LUPA_2013" = "Total.HHA.Charge.Amount..non.LUPA.") %>% select(Provider.ID, Total.HHA.Charge.Amount..non.LUPA_2013)
hha_allyear<- hha_2015_q2 %>% inner_join(hha_2014_q2, "Provider.ID") %>% inner_join(hha_2013_q2, "Provider.ID") %>% select((1:6), (11:12)) %>% rename("2015" = "Total.HHA.Charge.Amount..non.LUPA.", "2014" = "Total.HHA.Charge.Amount..non.LUPA_2014", "2013" = "Total.HHA.Charge.Amount..non.LUPA_2013")
hha_allyear_graph <- hha_allyear %>% gather(`2015`, `2013`, `2014`, key  = Year, value = HHA_charge, convert = TRUE)
ggplot(hha_allyear_graph) + geom_line(aes(x=Year,y=HHA_charge, group = Provider.ID)) + guides(color=F) +
scale_x_discrete(breaks=c(2013, 2014, 2015),labels=c(2013, 2014, 2015)) + theme_minimal() +
labs(x = "Year (2013-2015)", y = "Total HHA Charge Non-LUPA")
hhaData2015.F2 <- hhadatahhrg2015.untidy %>%
select("Agency.Name", "Total.HHA.Medicare.Payment.Amount..non.LUPA.", "Female.Beneficiaries", "Male.Beneficiaries") %>%
mutate(Differnece_In_Males_and_Females = Male.Beneficiaries - Female.Beneficiaries) %>%
arrange(desc(Differnece_In_Males_and_Females))
ggplot(hhaData2015.F2, aes(x = Differnece_In_Males_and_Females, y = Total.HHA.Medicare.Payment.Amount..non.LUPA.)) +
geom_line() +
labs(x = "Difference in Males and Females per HHA", y = "HHA Medicare Payment Non-LUPA")
MAE.func=function(actual,predict){
MAE=mean(abs(actual-predict))
return(MAE)
}
#Seperating the HHRG Description into new variables
hhadata2015.seperated <- hhadata2015.untidy %>%
separate(col = HHRG.Description, into = c("HHRG.Description", "Therapies", "Clinical_Severity_Level", "Functional_Severity_Level", "Service_Severity_Level"),
sep = ",", remove = FALSE, extra = "drop")
hhadata2015.seperated$Clinical_Severity_Level <- as.numeric(gsub("\\D", "", hhadata2015.seperated$Clinical_Severity_Level))
hhadata2015.seperated$Functional_Severity_Level <- as.numeric(gsub("\\D", "", hhadata2015.seperated$Functional_Severity_Level))
hhadata2015.seperated$Service_Severity_Level <- as.numeric(gsub("\\D", "", hhadata2015.seperated$Service_Severity_Level))
hhadata2015.seperated <- hhadata2015.seperated %>%
select("HHRG", "HHRG.Description", "Clinical_Severity_Level", "Functional_Severity_Level", "Service_Severity_Level", "Distinct.Beneficiaries", "Total.HHA.Medicare.Payment.Amount", "Average.HHA.Medicare.Payment.Amount")
#creating summaries of the different serverity levels
average_amt_by_service_severity <- hhadata2015.seperated %>%
group_by(Service_Severity_Level) %>%
summarize(Average_Amount_Provided_by_Medicare = sum(Total.HHA.Medicare.Payment.Amount) / sum(Distinct.Beneficiaries))
average_amt_by_clincical_severity <- hhadata2015.seperated %>%
group_by(Clinical_Severity_Level) %>%
summarize(Average_Amount_Provided_by_Medicare = sum(Total.HHA.Medicare.Payment.Amount) / sum(Distinct.Beneficiaries))
average_amt_by_functional_severity <- hhadata2015.seperated %>%
group_by(Functional_Severity_Level) %>%
summarize(Average_Amount_Provided_by_Medicare = sum(Total.HHA.Medicare.Payment.Amount) / sum(Distinct.Beneficiaries))
average_amt_by_clincical_severity
average_amt_by_functional_severity
average_amt_by_service_severity
set.seed(112)
rmse_values <- c()
for (i in 1:nrow(hhadata2015.seperated)) {
row_removed <- hhadata2015.seperated[-i, ]
lm_model <- lm(Average.HHA.Medicare.Payment.Amount ~ Service_Severity_Level + Functional_Severity_Level + Clinical_Severity_Level, data =    row_removed)
prediction <- predict(lm_model, newdata = hhadata2015.seperated[i, ])
rmse_i <- sqrt(mean((hhadata2015.seperated$Average.HHA.Medicare.Payment.Amount[i] - prediction)^2))
rmse_values <- c(rmse_values, rmse_i)
hhadata2015.seperated$RMSE[i] <- rmse_i
hhadata2015.seperated$Predictions[i] <- prediction
}
average_rmse <- mean(rmse_values)
print(paste("Average Root Mean Squared Error (RMSE) from Cross-Validation:", average_rmse))
#Creating residual plots for the different types of severity
hhadata2015.seperated$residuals <- hhadata2015.seperated$Average.HHA.Medicare.Payment.Amount - hhadata2015.seperated$Predictions
plot_data1 <- ggplot(hhadata2015.seperated, aes(x = Service_Severity_Level, y = residuals)) +
geom_point() +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(x = "Service Severity Level", y = "Residuals") +
ggtitle("Linear Model Residuals") +
theme_minimal()
plot_data2 <- ggplot(hhadata2015.seperated, aes(x = Functional_Severity_Level, y = residuals)) +
geom_point() +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(x = "Functional Severity Level", y = "Residuals") +
ggtitle("Linear Model Residuals") +
theme_minimal()
plot_data3 <- ggplot(hhadata2015.seperated, aes(x = Clinical_Severity_Level, y = residuals)) +
geom_point() +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(x = "Clinical Severity Level", y = "Residuals") +
ggtitle("Linear Model Residuals") +
theme_minimal()
#Combining into one plot
combined_data <- bind_rows(
data.frame(variable = "Service_Severity_Level", hhadata2015.seperated),
data.frame(variable = "Functional_Severity_Level", hhadata2015.seperated),
data.frame(variable = "Clinical_Severity_Level", hhadata2015.seperated)
)
# Create the overlapped plot
ggplot(hhadata2015.seperated, aes(x = as.numeric(Service_Severity_Level), y = residuals, color = "Service_Severity_Level")) +
geom_point() +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(x = "Severity Level", y = "Residuals") +
ggtitle("Linear Model Residuals") +
scale_x_continuous(breaks = 1:4, labels = c("Severity 1", "Severity 2", "Severity 3", "Severity 4")) +
theme_minimal() +
geom_point(data = hhadata2015.seperated, aes(x = as.numeric(Functional_Severity_Level), y = residuals, color = "Functional_Severity_Level")) +
geom_point(data = hhadata2015.seperated, aes(x = as.numeric(Clinical_Severity_Level), y = residuals, color = "Clinical_Severity_Level")) +
scale_color_manual(name = "Severity Levels", values = c("Service_Severity_Level" = "blue", "Functional_Severity_Level" = "green", "Clinical_Severity_Level" = "orange"))
plot_data3
set.seed(112)
rmse_values <- c()
for (i in 1:nrow(hhadata2015.seperated)) {
row_removed <- hhadata2015.seperated[-i, ]
lm_model <- lm(Average.HHA.Medicare.Payment.Amount ~ Service_Severity_Level + Functional_Severity_Level + Clinical_Severity_Level, data =    row_removed)
prediction <- predict(lm_model, newdata = hhadata2015.seperated[i, ])
rmse_i <- sqrt(mean((hhadata2015.seperated$Average.HHA.Medicare.Payment.Amount[i] - prediction)^2))
rmse_values <- c(rmse_values, rmse_i)
hhadata2015.seperated$RMSE[i] <- rmse_i
hhadata2015.seperated$Predictions[i] <- prediction
}
average_rmse <- mean(rmse_values)
print(paste("Average Root Mean Squared Error (RMSE) from Cross-Validation:", average_rmse))
hhadata2015.seperated$
hhadata2015.seperated
set.seed(112)
rmse_values <- c()
for (i in 1:nrow(hhadata2015.seperated)) {
row_removed <- hhadata2015.seperated[-i, ]
lm_model <- lm(Average.HHA.Medicare.Payment.Amount ~ Service_Severity_Level + Functional_Severity_Level + Clinical_Severity_Level, data =    row_removed)
prediction <- predict(lm_model, newdata = hhadata2015.seperated[i, ])
rmse_i <- sqrt(mean((hhadata2015.seperated$Average.HHA.Medicare.Payment.Amount[i] - prediction)^2))
rmse_values <- c(rmse_values, rmse_i)
hhadata2015.seperated$RMSE[i] <- rmse_i
hhadata2015.seperated$Predictions[i] <- prediction
}
average_rmse <- mean(rmse_values)
print(paste("Average Root Mean Squared Error (RMSE) from Cross-Validation:", average_rmse))
hhadata2015.seperated
set.seed(112)
rmse_values <- c()
for (i in 1:nrow(hhadata2015.seperated)) {
row_removed <- hhadata2015.seperated[-i, ]
lm_model <- lm(Average.HHA.Medicare.Payment.Amount ~ Service_Severity_Level + Functional_Severity_Level + Clinical_Severity_Level, data =    row_removed)
prediction <- predict(lm_model, newdata = hhadata2015.seperated[i, ])
rmse_i <- sqrt(mean((hhadata2015.seperated$Average.HHA.Medicare.Payment.Amount[i] - prediction)^2))
rmse_values <- c(rmse_values, rmse_i)
hhadata2015.seperated$RMSE[i] <- rmse_i
hhadata2015.seperated$Predictions[i] <- prediction
}
average_rmse <- mean(rmse_values)
print(paste("Average Root Mean Squared Error (RMSE) from Cross-Validation:", average_rmse))
set.seed(112)
rmse_values <- c()
for (i in 1:nrow(hhadata2015.seperated)) {
row_removed <- hhadata2015.seperated[-i, ]
lm_model <- lm(Average.HHA.Medicare.Payment.Amount ~ Service_Severity_Level + Functional_Severity_Level + Clinical_Severity_Level, data =    row_removed)
prediction <- predict(lm_model, newdata = hhadata2015.seperated[i, ])
rmse_i <- (hhadata2015.seperated$Average.HHA.Medicare.Payment.Amount[i] - prediction)^2)
set.seed(112)
rmse_values <- c()
for (i in 1:nrow(hhadata2015.seperated)) {
row_removed <- hhadata2015.seperated[-i, ]
lm_model <- lm(Average.HHA.Medicare.Payment.Amount ~ Service_Severity_Level + Functional_Severity_Level + Clinical_Severity_Level, data =    row_removed)
prediction <- predict(lm_model, newdata = hhadata2015.seperated[i, ])
rmse_i <- ((hhadata2015.seperated$Average.HHA.Medicare.Payment.Amount[i] - prediction)^2)
rmse_values <- c(rmse_values, rmse_i)
hhadata2015.seperated$RMSE[i] <- rmse_i
hhadata2015.seperated$Predictions[i] <- prediction
}
average_rmse <- mean(rmse_values)
print(paste("Average Root Mean Squared Error (RMSE) from Cross-Validation:", average_rmse))
set.seed(112)
rmse_values <- c()
for (i in 1:nrow(hhadata2015.seperated)) {
row_removed <- hhadata2015.seperated[-i, ]
lm_model <- lm(Average.HHA.Medicare.Payment.Amount ~ Service_Severity_Level + Functional_Severity_Level + Clinical_Severity_Level, data =    row_removed)
prediction <- predict(lm_model, newdata = hhadata2015.seperated[i, ])
rmse_i <- ((hhadata2015.seperated$Average.HHA.Medicare.Payment.Amount[i] - prediction))
rmse_values <- c(rmse_values, rmse_i)
hhadata2015.seperated$RMSE[i] <- rmse_i
hhadata2015.seperated$Predictions[i] <- prediction
}
average_rmse <- sqrt(mean(rmse_values))
print(paste("Average Root Mean Squared Error (RMSE) from Cross-Validation:", average_rmse))
set.seed(112)
rmse_values <- c()
for (i in 1:nrow(hhadata2015.seperated)) {
row_removed <- hhadata2015.seperated[-i, ]
lm_model <- lm(Average.HHA.Medicare.Payment.Amount ~ Service_Severity_Level + Functional_Severity_Level + Clinical_Severity_Level, data =    row_removed)
prediction <- predict(lm_model, newdata = hhadata2015.seperated[i, ])
rmse_i <- ((hhadata2015.seperated$Average.HHA.Medicare.Payment.Amount[i] - prediction)^2)
rmse_values <- c(rmse_values, rmse_i)
hhadata2015.seperated$RMSE[i] <- rmse_i
hhadata2015.seperated$Predictions[i] <- prediction
}
average_rmse <- sqrt(mean(rmse_values))
print(paste("Average Root Mean Squared Error (RMSE) from Cross-Validation:", average_rmse))
